<h1>Refactoring</h1>

<i>Refactoring is the process of changing a software system in such a
way that it does not alter the external behaviour of the code yet
improves its internal structure.</i> - Martin Fowler<p>

Although refactoring should always be part of the process used to
create new code, it is not the part that adds new features, it only
improves the design.<p>

Although there are times when it is better to start fresh, refactoring
changes the balance point, making it possible to improve code rather
than take the risk of rewriting it - it preserves the knowledge
embedded in the existing code.<p>

Refactoring strive to be safe transformations. Even big refactorings
that change large amounts of code are divided into smaller, safe
refactorings. Ideally, small refactorings are applied "mercilessly"
enough that large refactorings are rarely needed. Even when applying
large-scale refactorings, the approach is not <i>no new features for six
months while we refactor</i>, but rather, <i>refactor as we go, and
    keep the system running at all times.</i><p>

<h2>The Refactoring Cycle</h2>

<ul>
<li><b>Passes all tests.</b> "If it does not have to work, I can give it to you
right now."</li>
<li><b>Communicates.</b> This makes an appeal to our intuition about future
readers of our code (including ourselves).</li>
<li><b>No duplication.</b> Duplicate code is asking for trouble; it is too
vulnerable to changes in one place but not the other.</li>
<li><b>Fewest classes and methods.</b> All things being equal, we prefer smaller code.</li>
</ul>
